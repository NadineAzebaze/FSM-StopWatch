/** Generated by YAKINDU Statechart Tools code generator. */
package fr.unice.polytech.si4;

import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;
import com.yakindu.core.rx.Observable;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class StopWatchStateMachine implements IStatemachine, ITimed {
	public enum State {
		MAIN_REGION_MODE,
		MAIN_REGION_MODE_MODE_HOUR_PRINTED,
		MAIN_REGION_MODE_MODE_DATE_PRINTED,
		MAIN_REGION_STOPWATCH,
		MAIN_REGION_STOPWATCH_R1_INITIAL_STATE,
		MAIN_REGION_STOPWATCH_R1_STOPPED,
		MAIN_REGION_STOPWATCH_R1_TIME_IS_RUNNING,
		MAIN_REGION_STOPWATCH_R1_TIME_IS_RUNNING_RUNNING_TIME_PAUSED,
		MAIN_REGION_STOPWATCH_R1_TIME_IS_RUNNING_RUNNING_TIME_RESUMED,
		$NULLSTATE$
	};
	
	private State[] historyVector = new State[3];
	private final State[] stateVector = new State[1];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[5];
	
	private BlockingQueue<Runnable> inEventQueue = new LinkedBlockingQueue<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		synchronized(StopWatchStateMachine.this) {
			return isExecuting;
		}
	}
	
	protected void setIsExecuting(boolean value) {
		synchronized(StopWatchStateMachine.this) {
			this.isExecuting = value;
		}
	}
	public StopWatchStateMachine() {
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		for (int i = 0; i < 3; i++) {
			historyVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		
		isExecuting = false;
	}
	
	public synchronized void enter() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		enterSequence_main_Region_default();
		isExecuting = false;
	}
	
	public synchronized void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		exitSequence_main_Region();
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		leftButton = false;
		rightButton = false;
		modeButton = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
		timeEvents[2] = false;
		timeEvents[3] = false;
		timeEvents[4] = false;
	}
	
	private void microStep() {
		switch (stateVector[0]) {
		case MAIN_REGION_MODE_MODE_HOUR_PRINTED:
			main_Region_mode_mode_hour_printed_react(-1);
			break;
		case MAIN_REGION_MODE_MODE_DATE_PRINTED:
			main_Region_mode_mode_date_printed_react(-1);
			break;
		case MAIN_REGION_STOPWATCH_R1_INITIAL_STATE:
			main_Region_stopwatch_r1_Initial_state_react(-1);
			break;
		case MAIN_REGION_STOPWATCH_R1_STOPPED:
			main_Region_stopwatch_r1_stopped_react(-1);
			break;
		case MAIN_REGION_STOPWATCH_R1_TIME_IS_RUNNING_RUNNING_TIME_PAUSED:
			main_Region_stopwatch_r1_Time_is_running_running_time_paused_react(-1);
			break;
		case MAIN_REGION_STOPWATCH_R1_TIME_IS_RUNNING_RUNNING_TIME_RESUMED:
			main_Region_stopwatch_r1_Time_is_running_running_time_resumed_react(-1);
			break;
		default:
			break;
		}
	}
	
	private void runCycle() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		
		nextEvent();
		do { 
			microStep();
			
			clearInEvents();
			
			nextEvent();
		} while ((((((((leftButton || rightButton) || modeButton) || timeEvents[0]) || timeEvents[1]) || timeEvents[2]) || timeEvents[3]) || timeEvents[4]));
		
		isExecuting = false;
	}
	
	protected void nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return;
		}
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_MODE:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_MODE.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_MODE_MODE_DATE_PRINTED.ordinal();
		case MAIN_REGION_MODE_MODE_HOUR_PRINTED:
			return stateVector[0] == State.MAIN_REGION_MODE_MODE_HOUR_PRINTED;
		case MAIN_REGION_MODE_MODE_DATE_PRINTED:
			return stateVector[0] == State.MAIN_REGION_MODE_MODE_DATE_PRINTED;
		case MAIN_REGION_STOPWATCH:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_STOPWATCH.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_STOPWATCH_R1_TIME_IS_RUNNING_RUNNING_TIME_RESUMED.ordinal();
		case MAIN_REGION_STOPWATCH_R1_INITIAL_STATE:
			return stateVector[0] == State.MAIN_REGION_STOPWATCH_R1_INITIAL_STATE;
		case MAIN_REGION_STOPWATCH_R1_STOPPED:
			return stateVector[0] == State.MAIN_REGION_STOPWATCH_R1_STOPPED;
		case MAIN_REGION_STOPWATCH_R1_TIME_IS_RUNNING:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_STOPWATCH_R1_TIME_IS_RUNNING.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_STOPWATCH_R1_TIME_IS_RUNNING_RUNNING_TIME_RESUMED.ordinal();
		case MAIN_REGION_STOPWATCH_R1_TIME_IS_RUNNING_RUNNING_TIME_PAUSED:
			return stateVector[0] == State.MAIN_REGION_STOPWATCH_R1_TIME_IS_RUNNING_RUNNING_TIME_PAUSED;
		case MAIN_REGION_STOPWATCH_R1_TIME_IS_RUNNING_RUNNING_TIME_RESUMED:
			return stateVector[0] == State.MAIN_REGION_STOPWATCH_R1_TIME_IS_RUNNING_RUNNING_TIME_RESUMED;
		default:
			return false;
		}
	}
	
	public synchronized void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public synchronized void raiseTimeEvent(int eventID) {
		inEventQueue.add(() -> {
			timeEvents[eventID] = true;
		});
		runCycle();
	}
	
	
	private boolean leftButton;
	
	
	public void raiseLeftButton() {
		synchronized(StopWatchStateMachine.this) {
			inEventQueue.add(() -> {
				leftButton = true;
			});
			runCycle();
		}
	}
	
	private boolean rightButton;
	
	
	public void raiseRightButton() {
		synchronized(StopWatchStateMachine.this) {
			inEventQueue.add(() -> {
				rightButton = true;
			});
			runCycle();
		}
	}
	
	private boolean modeButton;
	
	
	public void raiseModeButton() {
		synchronized(StopWatchStateMachine.this) {
			inEventQueue.add(() -> {
				modeButton = true;
			});
			runCycle();
		}
	}
	
	private boolean doStart;
	
	
	protected void raiseDoStart() {
		synchronized(StopWatchStateMachine.this) {
			doStart = true;
			doStartObservable.next(null);
		}
	}
	
	private Observable<Void> doStartObservable = new Observable<Void>();
	
	public Observable<Void> getDoStart() {
		return doStartObservable;
	}
	
	private boolean doPause;
	
	
	protected void raiseDoPause() {
		synchronized(StopWatchStateMachine.this) {
			doPause = true;
			doPauseObservable.next(null);
		}
	}
	
	private Observable<Void> doPauseObservable = new Observable<Void>();
	
	public Observable<Void> getDoPause() {
		return doPauseObservable;
	}
	
	private boolean doResume;
	
	
	protected void raiseDoResume() {
		synchronized(StopWatchStateMachine.this) {
			doResume = true;
			doResumeObservable.next(null);
		}
	}
	
	private Observable<Void> doResumeObservable = new Observable<Void>();
	
	public Observable<Void> getDoResume() {
		return doResumeObservable;
	}
	
	private boolean doStop;
	
	
	protected void raiseDoStop() {
		synchronized(StopWatchStateMachine.this) {
			doStop = true;
			doStopObservable.next(null);
		}
	}
	
	private Observable<Void> doStopObservable = new Observable<Void>();
	
	public Observable<Void> getDoStop() {
		return doStopObservable;
	}
	
	private boolean doReset;
	
	
	protected void raiseDoReset() {
		synchronized(StopWatchStateMachine.this) {
			doReset = true;
			doResetObservable.next(null);
		}
	}
	
	private Observable<Void> doResetObservable = new Observable<Void>();
	
	public Observable<Void> getDoReset() {
		return doResetObservable;
	}
	
	private boolean count;
	
	
	protected void raiseCount() {
		synchronized(StopWatchStateMachine.this) {
			count = true;
			countObservable.next(null);
		}
	}
	
	private Observable<Void> countObservable = new Observable<Void>();
	
	public Observable<Void> getCount() {
		return countObservable;
	}
	
	private boolean printDate;
	
	
	protected void raisePrintDate() {
		synchronized(StopWatchStateMachine.this) {
			printDate = true;
			printDateObservable.next(null);
		}
	}
	
	private Observable<Void> printDateObservable = new Observable<Void>();
	
	public Observable<Void> getPrintDate() {
		return printDateObservable;
	}
	
	private boolean printHour;
	
	
	protected void raisePrintHour() {
		synchronized(StopWatchStateMachine.this) {
			printHour = true;
			printHourObservable.next(null);
		}
	}
	
	private Observable<Void> printHourObservable = new Observable<Void>();
	
	public Observable<Void> getPrintHour() {
		return printHourObservable;
	}
	
	private boolean updateTimeValue;
	
	
	protected void raiseUpdateTimeValue() {
		synchronized(StopWatchStateMachine.this) {
			updateTimeValue = true;
			updateTimeValueObservable.next(null);
		}
	}
	
	private Observable<Void> updateTimeValueObservable = new Observable<Void>();
	
	public Observable<Void> getUpdateTimeValue() {
		return updateTimeValueObservable;
	}
	
	/* Entry action for state 'mode'. */
	private void entryAction_main_Region_mode() {
		timerService.setTimer(this, 0, 7, true);
	}
	
	/* Entry action for state 'hour printed'. */
	private void entryAction_main_Region_mode_mode_hour_printed() {
		timerService.setTimer(this, 1, (1 * 1000), false);
	}
	
	/* Entry action for state 'date printed'. */
	private void entryAction_main_Region_mode_mode_date_printed() {
		timerService.setTimer(this, 2, (1 * 1000), false);
	}
	
	/* Entry action for state 'Time is running'. */
	private void entryAction_main_Region_stopwatch_r1_Time_is_running() {
		timerService.setTimer(this, 3, 7, false);
	}
	
	/* Entry action for state 'resumed'. */
	private void entryAction_main_Region_stopwatch_r1_Time_is_running_running_time_resumed() {
		timerService.setTimer(this, 4, 77, true);
	}
	
	/* Exit action for state 'mode'. */
	private void exitAction_main_Region_mode() {
		timerService.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'hour printed'. */
	private void exitAction_main_Region_mode_mode_hour_printed() {
		timerService.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'date printed'. */
	private void exitAction_main_Region_mode_mode_date_printed() {
		timerService.unsetTimer(this, 2);
	}
	
	/* Exit action for state 'Time is running'. */
	private void exitAction_main_Region_stopwatch_r1_Time_is_running() {
		timerService.unsetTimer(this, 3);
	}
	
	/* Exit action for state 'resumed'. */
	private void exitAction_main_Region_stopwatch_r1_Time_is_running_running_time_resumed() {
		timerService.unsetTimer(this, 4);
	}
	
	/* 'default' enter sequence for state mode */
	private void enterSequence_main_Region_mode_default() {
		entryAction_main_Region_mode();
		enterSequence_main_Region_mode_mode_default();
	}
	
	/* 'default' enter sequence for state hour printed */
	private void enterSequence_main_Region_mode_mode_hour_printed_default() {
		entryAction_main_Region_mode_mode_hour_printed();
		stateVector[0] = State.MAIN_REGION_MODE_MODE_HOUR_PRINTED;
		
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state date printed */
	private void enterSequence_main_Region_mode_mode_date_printed_default() {
		entryAction_main_Region_mode_mode_date_printed();
		stateVector[0] = State.MAIN_REGION_MODE_MODE_DATE_PRINTED;
		
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state stopwatch */
	private void enterSequence_main_Region_stopwatch_default() {
		enterSequence_main_Region_stopwatch_r1_default();
	}
	
	/* 'default' enter sequence for state Initial state */
	private void enterSequence_main_Region_stopwatch_r1_Initial_state_default() {
		stateVector[0] = State.MAIN_REGION_STOPWATCH_R1_INITIAL_STATE;
		
		historyVector[1] = stateVector[0];
	}
	
	/* 'default' enter sequence for state stopped */
	private void enterSequence_main_Region_stopwatch_r1_stopped_default() {
		stateVector[0] = State.MAIN_REGION_STOPWATCH_R1_STOPPED;
		
		historyVector[1] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Time is running */
	private void enterSequence_main_Region_stopwatch_r1_Time_is_running_default() {
		entryAction_main_Region_stopwatch_r1_Time_is_running();
		enterSequence_main_Region_stopwatch_r1_Time_is_running_running_time_default();
		historyVector[1] = stateVector[0];
	}
	
	/* 'default' enter sequence for state paused */
	private void enterSequence_main_Region_stopwatch_r1_Time_is_running_running_time_paused_default() {
		stateVector[0] = State.MAIN_REGION_STOPWATCH_R1_TIME_IS_RUNNING_RUNNING_TIME_PAUSED;
		
		historyVector[2] = stateVector[0];
	}
	
	/* 'default' enter sequence for state resumed */
	private void enterSequence_main_Region_stopwatch_r1_Time_is_running_running_time_resumed_default() {
		entryAction_main_Region_stopwatch_r1_Time_is_running_running_time_resumed();
		stateVector[0] = State.MAIN_REGION_STOPWATCH_R1_TIME_IS_RUNNING_RUNNING_TIME_RESUMED;
		
		historyVector[2] = stateVector[0];
	}
	
	/* 'default' enter sequence for region main Region */
	private void enterSequence_main_Region_default() {
		react_main_Region__entry_Default();
	}
	
	/* 'default' enter sequence for region mode */
	private void enterSequence_main_Region_mode_mode_default() {
		react_main_Region_mode_mode__entry_Default();
	}
	
	/* shallow enterSequence with history in child mode */
	private void shallowEnterSequence_main_Region_mode_mode() {
		switch (historyVector[0]) {
		case MAIN_REGION_MODE_MODE_HOUR_PRINTED:
			enterSequence_main_Region_mode_mode_hour_printed_default();
			break;
		case MAIN_REGION_MODE_MODE_DATE_PRINTED:
			enterSequence_main_Region_mode_mode_date_printed_default();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_Region_stopwatch_r1_default() {
		react_main_Region_stopwatch_r1__entry_Default();
	}
	
	/* deep enterSequence with history in child r1 */
	private void deepEnterSequence_main_Region_stopwatch_r1() {
		switch (historyVector[1]) {
		case MAIN_REGION_STOPWATCH_R1_INITIAL_STATE:
			enterSequence_main_Region_stopwatch_r1_Initial_state_default();
			break;
		case MAIN_REGION_STOPWATCH_R1_STOPPED:
			enterSequence_main_Region_stopwatch_r1_stopped_default();
			break;
		case MAIN_REGION_STOPWATCH_R1_TIME_IS_RUNNING_RUNNING_TIME_PAUSED:
			entryAction_main_Region_stopwatch_r1_Time_is_running();
			deepEnterSequence_main_Region_stopwatch_r1_Time_is_running_running_time();
			break;
		case MAIN_REGION_STOPWATCH_R1_TIME_IS_RUNNING_RUNNING_TIME_RESUMED:
			entryAction_main_Region_stopwatch_r1_Time_is_running();
			deepEnterSequence_main_Region_stopwatch_r1_Time_is_running_running_time();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region running time */
	private void enterSequence_main_Region_stopwatch_r1_Time_is_running_running_time_default() {
		react_main_Region_stopwatch_r1_Time_is_running_running_time__entry_Default();
	}
	
	/* deep enterSequence with history in child running time */
	private void deepEnterSequence_main_Region_stopwatch_r1_Time_is_running_running_time() {
		switch (historyVector[2]) {
		case MAIN_REGION_STOPWATCH_R1_TIME_IS_RUNNING_RUNNING_TIME_PAUSED:
			enterSequence_main_Region_stopwatch_r1_Time_is_running_running_time_paused_default();
			break;
		case MAIN_REGION_STOPWATCH_R1_TIME_IS_RUNNING_RUNNING_TIME_RESUMED:
			enterSequence_main_Region_stopwatch_r1_Time_is_running_running_time_resumed_default();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for state mode */
	private void exitSequence_main_Region_mode() {
		exitSequence_main_Region_mode_mode();
		exitAction_main_Region_mode();
	}
	
	/* Default exit sequence for state hour printed */
	private void exitSequence_main_Region_mode_mode_hour_printed() {
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_main_Region_mode_mode_hour_printed();
	}
	
	/* Default exit sequence for state date printed */
	private void exitSequence_main_Region_mode_mode_date_printed() {
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_main_Region_mode_mode_date_printed();
	}
	
	/* Default exit sequence for state stopwatch */
	private void exitSequence_main_Region_stopwatch() {
		exitSequence_main_Region_stopwatch_r1();
	}
	
	/* Default exit sequence for state Initial state */
	private void exitSequence_main_Region_stopwatch_r1_Initial_state() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state stopped */
	private void exitSequence_main_Region_stopwatch_r1_stopped() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Time is running */
	private void exitSequence_main_Region_stopwatch_r1_Time_is_running() {
		exitSequence_main_Region_stopwatch_r1_Time_is_running_running_time();
		exitAction_main_Region_stopwatch_r1_Time_is_running();
	}
	
	/* Default exit sequence for state paused */
	private void exitSequence_main_Region_stopwatch_r1_Time_is_running_running_time_paused() {
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state resumed */
	private void exitSequence_main_Region_stopwatch_r1_Time_is_running_running_time_resumed() {
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_main_Region_stopwatch_r1_Time_is_running_running_time_resumed();
	}
	
	/* Default exit sequence for region main Region */
	private void exitSequence_main_Region() {
		switch (stateVector[0]) {
		case MAIN_REGION_MODE_MODE_HOUR_PRINTED:
			exitSequence_main_Region_mode_mode_hour_printed();
			exitAction_main_Region_mode();
			break;
		case MAIN_REGION_MODE_MODE_DATE_PRINTED:
			exitSequence_main_Region_mode_mode_date_printed();
			exitAction_main_Region_mode();
			break;
		case MAIN_REGION_STOPWATCH_R1_INITIAL_STATE:
			exitSequence_main_Region_stopwatch_r1_Initial_state();
			break;
		case MAIN_REGION_STOPWATCH_R1_STOPPED:
			exitSequence_main_Region_stopwatch_r1_stopped();
			break;
		case MAIN_REGION_STOPWATCH_R1_TIME_IS_RUNNING_RUNNING_TIME_PAUSED:
			exitSequence_main_Region_stopwatch_r1_Time_is_running_running_time_paused();
			exitAction_main_Region_stopwatch_r1_Time_is_running();
			break;
		case MAIN_REGION_STOPWATCH_R1_TIME_IS_RUNNING_RUNNING_TIME_RESUMED:
			exitSequence_main_Region_stopwatch_r1_Time_is_running_running_time_resumed();
			exitAction_main_Region_stopwatch_r1_Time_is_running();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region mode */
	private void exitSequence_main_Region_mode_mode() {
		switch (stateVector[0]) {
		case MAIN_REGION_MODE_MODE_HOUR_PRINTED:
			exitSequence_main_Region_mode_mode_hour_printed();
			break;
		case MAIN_REGION_MODE_MODE_DATE_PRINTED:
			exitSequence_main_Region_mode_mode_date_printed();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_Region_stopwatch_r1() {
		switch (stateVector[0]) {
		case MAIN_REGION_STOPWATCH_R1_INITIAL_STATE:
			exitSequence_main_Region_stopwatch_r1_Initial_state();
			break;
		case MAIN_REGION_STOPWATCH_R1_STOPPED:
			exitSequence_main_Region_stopwatch_r1_stopped();
			break;
		case MAIN_REGION_STOPWATCH_R1_TIME_IS_RUNNING_RUNNING_TIME_PAUSED:
			exitSequence_main_Region_stopwatch_r1_Time_is_running_running_time_paused();
			exitAction_main_Region_stopwatch_r1_Time_is_running();
			break;
		case MAIN_REGION_STOPWATCH_R1_TIME_IS_RUNNING_RUNNING_TIME_RESUMED:
			exitSequence_main_Region_stopwatch_r1_Time_is_running_running_time_resumed();
			exitAction_main_Region_stopwatch_r1_Time_is_running();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region running time */
	private void exitSequence_main_Region_stopwatch_r1_Time_is_running_running_time() {
		switch (stateVector[0]) {
		case MAIN_REGION_STOPWATCH_R1_TIME_IS_RUNNING_RUNNING_TIME_PAUSED:
			exitSequence_main_Region_stopwatch_r1_Time_is_running_running_time_paused();
			break;
		case MAIN_REGION_STOPWATCH_R1_TIME_IS_RUNNING_RUNNING_TIME_RESUMED:
			exitSequence_main_Region_stopwatch_r1_Time_is_running_running_time_resumed();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for shallow history entry  */
	private void react_main_Region_mode_mode__entry_Default() {
		/* Enter the region with shallow history */
		if (historyVector[0] != State.$NULLSTATE$) {
			shallowEnterSequence_main_Region_mode_mode();
		} else {
			enterSequence_main_Region_mode_mode_hour_printed_default();
		}
	}
	
	/* Default react sequence for deep history entry  */
	private void react_main_Region_stopwatch_r1__entry_Default() {
		/* Enter the region with deep history */
		if (historyVector[1] != State.$NULLSTATE$) {
			deepEnterSequence_main_Region_stopwatch_r1();
		} else {
			enterSequence_main_Region_stopwatch_r1_Initial_state_default();
		}
	}
	
	/* Default react sequence for deep history entry  */
	private void react_main_Region_stopwatch_r1_Time_is_running_running_time__entry_Default() {
		/* Enter the region with deep history */
		if (historyVector[2] != State.$NULLSTATE$) {
			deepEnterSequence_main_Region_stopwatch_r1_Time_is_running_running_time();
		} else {
			enterSequence_main_Region_stopwatch_r1_Time_is_running_running_time_resumed_default();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_Region__entry_Default() {
		enterSequence_main_Region_stopwatch_default();
	}
	
	private long react(long transitioned_before) {
		return transitioned_before;
	}
	
	private long main_Region_mode_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (timeEvents[0]) {
				exitSequence_main_Region_mode();
				raiseCount();
				
				enterSequence_main_Region_mode_default();
				react(0);
				
				transitioned_after = 0;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_Region_mode_mode_hour_printed_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (modeButton) {
				exitSequence_main_Region_mode_mode_hour_printed();
				raisePrintDate();
				
				enterSequence_main_Region_mode_mode_date_printed_default();
				main_Region_mode_react(0);
				
				transitioned_after = 0;
			} else {
				if (timeEvents[1]) {
					exitSequence_main_Region_mode();
					enterSequence_main_Region_stopwatch_default();
					react(0);
					
					transitioned_after = 0;
				}
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_Region_mode_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_Region_mode_mode_date_printed_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (modeButton) {
				exitSequence_main_Region_mode_mode_date_printed();
				raisePrintHour();
				
				enterSequence_main_Region_mode_mode_hour_printed_default();
				main_Region_mode_react(0);
				
				transitioned_after = 0;
			} else {
				if (timeEvents[2]) {
					exitSequence_main_Region_mode();
					enterSequence_main_Region_stopwatch_default();
					react(0);
					
					transitioned_after = 0;
				}
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_Region_mode_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_Region_stopwatch_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (modeButton) {
				exitSequence_main_Region_stopwatch();
				raisePrintHour();
				
				enterSequence_main_Region_mode_default();
				react(0);
				
				transitioned_after = 0;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_Region_stopwatch_r1_Initial_state_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (leftButton) {
				exitSequence_main_Region_stopwatch_r1_Initial_state();
				raiseDoStart();
				
				enterSequence_main_Region_stopwatch_r1_Time_is_running_default();
				main_Region_stopwatch_react(0);
				
				transitioned_after = 0;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_Region_stopwatch_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_Region_stopwatch_r1_stopped_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (leftButton) {
				exitSequence_main_Region_stopwatch_r1_stopped();
				raiseDoReset();
				
				enterSequence_main_Region_stopwatch_r1_Initial_state_default();
				main_Region_stopwatch_react(0);
				
				transitioned_after = 0;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_Region_stopwatch_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_Region_stopwatch_r1_Time_is_running_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (timeEvents[3]) {
				exitSequence_main_Region_stopwatch_r1_Time_is_running();
				raiseCount();
				
				enterSequence_main_Region_stopwatch_r1_Time_is_running_default();
				main_Region_stopwatch_react(0);
				
				transitioned_after = 0;
			} else {
				if (leftButton) {
					exitSequence_main_Region_stopwatch_r1_Time_is_running();
					raiseDoStop();
					
					enterSequence_main_Region_stopwatch_r1_stopped_default();
					main_Region_stopwatch_react(0);
					
					transitioned_after = 0;
				}
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_Region_stopwatch_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_Region_stopwatch_r1_Time_is_running_running_time_paused_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (rightButton) {
				exitSequence_main_Region_stopwatch_r1_Time_is_running_running_time_paused();
				raiseDoResume();
				
				enterSequence_main_Region_stopwatch_r1_Time_is_running_running_time_resumed_default();
				main_Region_stopwatch_r1_Time_is_running_react(0);
				
				transitioned_after = 0;
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_Region_stopwatch_r1_Time_is_running_react(transitioned_before);
		}
		return transitioned_after;
	}
	
	private long main_Region_stopwatch_r1_Time_is_running_running_time_resumed_react(long transitioned_before) {
		long transitioned_after = transitioned_before;
		
		if (transitioned_after<0) {
			if (rightButton) {
				exitSequence_main_Region_stopwatch_r1_Time_is_running_running_time_resumed();
				raiseDoPause();
				
				enterSequence_main_Region_stopwatch_r1_Time_is_running_running_time_paused_default();
				main_Region_stopwatch_r1_Time_is_running_react(0);
				
				transitioned_after = 0;
			} else {
				if (timeEvents[4]) {
					exitSequence_main_Region_stopwatch_r1_Time_is_running_running_time_resumed();
					raiseUpdateTimeValue();
					
					enterSequence_main_Region_stopwatch_r1_Time_is_running_running_time_resumed_default();
					main_Region_stopwatch_r1_Time_is_running_react(0);
					
					transitioned_after = 0;
				}
			}
		}
		/* If no transition was taken then execute local reactions */
		if (transitioned_after==transitioned_before) {
			transitioned_after = main_Region_stopwatch_r1_Time_is_running_react(transitioned_before);
		}
		return transitioned_after;
	}
	
}
